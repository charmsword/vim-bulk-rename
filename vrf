#! /bin/bash

### WORKS FINE ON MACOSX 10.10.5 Yosemite
### original script by [snah](https://github.com/snah/vim-bulk-rename)
### changes by charmsword

function help
{
	echo "Usage: vrf [FOLDER]"
	echo ""
	echo "Open a list of filenames from FOLDER in vim for mass renaming."
	echo "When FOLDER is not given the current directory is used."
	echo ""
	echo "Upon exiting vim the files will be renamed as needed."
	echo "Files can also be removed by replacing the filename with and empty line."
	echo "Exit vim without saving or save an empty file to cancel."
	echo ""
	echo "WARNING: DO NOT reorder the filenames or remove lines, as the algorithm depends"
	echo "on the line number to identify the original file. To aid the user the 'dd'"
	echo "command is remapped to clear the current line, which results in the file being"
	echo "deleted."
}

# function clear2
# { 
# 	Remove quotes and double-quotes from filenames
# 	for file in .\*; do mv "$file" "${file//[^-_[:alnum:]\.[:space:][ЁёА-я]]/}"; done
# 	for file in .\*; do mv "$file" "${file//[^A-Za-z0-9._-[ЁёА-я]]/}"; done
# 	for file in *; do mv "$file" "${file//[^A-Za-z0-9\._\-\'ЁёА-я[\][:space:]]/}"; done
# 	for file in *; do mv $file ${file//\"/'}; done
# 	for file in *; do echo $file $(echo "$file" | sed -e 's/\"/\'/g'); done
# }

#  :::! WARNING, PAY ATTENTION !:::
# Change DOUBLE-QUOTES in filenames to SINGLE QUOTES (so that they wouldn't break MOVE commands)
function clear
{
	for file in *; do mv "$file" "$(echo $file | sed -e "s/\"/\'/g")"; done
}

if [ "$1" == "--help" -o "$1" == '-h' ]
then
	help
	exit
fi


if [ "$1" == "--clear" -o "$1" == '-c' ]
then
	clear
fi

# Temporary files
ORIG_NAMES='/tmp/orig_names'
NEW_NAMES='/tmp/new_names'
COMMANDS='/tmp/rename_commands'
touch "$COMMANDS"
chmod 700 "$COMMANDS"	# For security, so noone can make us execute arbitrary commands

# Create a list of filenames
# maybe later I will implement another version of vrf with `find` command... but not today
# find . -iname "*$1*" | sed 's/.*\///' > "$ORIG_NAMES"
\ls > "$ORIG_NAMES"

cp "$ORIG_NAMES" "$NEW_NAMES"

# Allow the user to remove files with dd command (it will leave an empty line) AND DIFF between ORIG NAMES and NEW NAMES, to see changes in progress
#vim +1 -c "nnoremap dd ^D" "$NEW_NAMES"
vim +1 -c "set foldlevel=9999 | cnoremap q qall | nnoremap dd ^D | autocmd TextChangedI,TextChanged * diffupdate" -d "$NEW_NAMES" "$ORIG_NAMES"

# Check if the edited file has the correct number of lines
if [ "$(wc -l < $ORIG_NAMES)" != "$(wc -l < "$NEW_NAMES")" ]
then
	echo "Number of filenames changed, to delete a file leave an empty line."
	echo "Quiting now."
	exit
fi

# Quote all filenames
sed -i '' -e 's/^/"/' "$ORIG_NAMES"
sed -i '' -e 's/$/"/' "$ORIG_NAMES"
#sed -e 's/"/\\"/g' "$NEW_NAMES"
sed -i '' -e 's/^/"/' "$NEW_NAMES"
sed -i '' -e 's/$/"/' "$NEW_NAMES"


# Create the commands to rename or delete files
# paste with delim. " " orig and new names
paste -d ' ' "$ORIG_NAMES" "$NEW_NAMES" | \
# add "mv ", escaping brackets and commas with backslashes
	sed 's/^/mv /' | sed 's/(/\(/' | sed 's/)/\)/' | sed 's/,/\,/' | \
# grepping ONLY those lines, where original and new names do not match
       	egrep -v 'mv (".*") \1' |  \
# sed 's/mv \("[^"]*"\) "\s*"*$/rm -rf \1/' > "$COMMANDS" # creating a REMOVE command for occurences, where NEW_NAME is NULL
# creating a TRASH command for occurences, where NEW_NAME is NULL
	sed 's/mv \("[^"]*"\) ""/trash \1/' > "$COMMANDS"

# Exectute the commands
bash -x "$COMMANDS"

# Remove temporary files
rm -f "$COMMANDS" "$ORIG_NAMES" "$NEW_NAMES"
